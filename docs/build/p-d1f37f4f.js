class t extends Error{constructor(t,i){super(t instanceof Error?t.message:t),this.target=i,t instanceof Error&&Object.assign(this,t)}}function i(i,r){const s=new t(r,i);console.error(s);try{c.find(i,"quantum-error").provide(s)}catch(n){throw s}}const r=(...t)=>r.debug&&console.log(...t);r.debug=!1;const s=r,n=()=>{};function o(t,i,r){const o=t[i]||n;t[i]=async function(...t){s(i,this);const n=await r(this);let e=await o.apply(this,t);return n instanceof Function&&await n(this),e}}function e(i){var r;const s=null===(r=i)||void 0===r?void 0:r.el;if(s instanceof Object&&"function"==typeof s.forceUpdate)return s;throw new t(`Property 'el' required on ${i}`)}const h=Symbol.for("stencil-quantum-providers");class c{constructor(t,i){this.key=t,this.value=i,this.listeners=[],this.hooks=new Map,this.retrieve=this.retrieve.bind(this),this.provide=this.provide.bind(this),this.listen=this.listen.bind(this)}retrieve(){return this.value}provide(t){return this.value=t,this.listeners.forEach(i=>i(t)),this}update(t){return this.provide(t(this.retrieve()))}listen(t){return this.listeners=[...this.listeners,t],t(this.value),()=>{this.listeners=this.listeners.filter(i=>i!==t)}}attach(t,i){s("Add Provider",t,this);const r=c.getAttached(t);return r.includes(this)||r.push(this),s("Total Providers",t,r),i?this:this.hook(t)}isHooked(t){return this.hooks.has(t)}hook(t){return s("Hook Provider",t,this),this.hooks.set(t,this.listen(()=>t.forceUpdate())),this}unhook(t){return s("Unhook Provider",t,this),this.isHooked(t)&&(this.hooks.get(t)(),this.hooks.delete(t)),this}static find(i,r){var n,o,e,h;s("Searching Provider",r,i);const a=c.getAttached(i,t=>t.key===r);if(a.length>1)throw new t(`Found multiple "${String(r)}" providers on the same object!`);if(1===a.length)return a[0];let u=null!=(e=null!=(n=i.parentElement)?n:null===(o=i.shadowRoot)||void 0===o?void 0:o.host)?e:null===(h=i.parentNode)||void 0===h?void 0:h.host;if(!u)throw new t(`No provider in hierarchy found that matches "${String(r)}"!`);return c.find(u,r).attach(i,!0)}static create(t,i,r){return s("Create Provider",t,i,r),new c(i,r).attach(t)}static getAttached(t,i=(()=>!0)){return t[h]instanceof Array||(t[h]=[]),t[h].filter(i)}}export{c as P,e as g,o as h,i as t};
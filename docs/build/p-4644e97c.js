import{f as t}from"./p-d3a33f42.js";const i=(...t)=>i.debug&&console.log(...t);i.debug=!1;const s=i,h=()=>{};function r(t,i,r){const n=t[i]||h;return t[i]=async function(...t){s(i,this);const h=await r(this);let o=await n.apply(this,t);return h instanceof Function&&await h(this),o},()=>{t[i]=n}}const n=Symbol.for("stencil-quantum-providers");class o{constructor(i,h,r=!1){this.key=i,this.value=h,this.debug=r,this.listeners=[],this.hooks=new Map,this.mutable=!1,this.paused=!1,this.retrieve=()=>this.value,this.provide=t=>{this.debug&&s(`(${String(this.key)}) `,"PROVIDING",t,"to",this.listeners);let i=this.value;return this.value=t,this.paused||this.listeners.filter((t=>!t.paused)).forEach((s=>s.action(t,i))),this},this.update=t=>this.provide(t(this.retrieve())),this.listen=(t,i=!0)=>{this.debug&&s(`(${String(this.key)}) `,"LISTEN",i,this,t);const h={action:t,unlisten:()=>this.unlisten(t),paused:!1};return this.listeners=[...this.listeners,h],i&&t(this.value),h},this.unlisten=t=>{this.listeners=this.listeners.filter((i=>i.action!==t))},this.attach=(t,i)=>{this.debug&&s(`(${String(this.key)}) `,"Add Provider",t,this);const h=o.getAttached(t);return h.includes(this)||h.push(this),this.debug&&s(`(${String(this.key)}) `,"Total Providers",t,h),i?this:this.hook(t)},this.isHooked=t=>this.hooks.has(t),this.getHook=t=>this.hooks.get(t),this.hook=i=>(this.debug&&s(`(${String(this.key)}) `,"Hook Provider",i,this),this.hooks.set(i,this.listen((()=>t(i)))),this),this.pauseHook=(t,i=!0)=>{this.debug&&s(`(${String(this.key)}) `,"Pausing Hook",i),this.isHooked(t)&&(this.getHook(t).paused=i)},this.unhook=t=>{var i;return this.debug&&s(`(${String(this.key)}) `,"Unhook Provider",t,this),this.isHooked(t)&&(null===(i=this.hooks.get(t))||void 0===i||i.unlisten(),this.hooks.delete(t)),this},this.destroy=()=>{this.listeners=[],this.hooks=new Map}}pause(t=!0){this.paused=t}static makeFilter(t,i){return s=>s.key===t||i&&"string"==typeof t&&s.key===i+"__"+t}static find(t,i,h,r){var n,e,c,u;r&&s(`(${String(i)}) `,"Searching Provider",i,h,t);const l=o.getAttached(t).filter(o.makeFilter(i,h));if(l.length>1)throw new a(`Found multiple "${String(i)}" providers on the same object!`);if(1===l.length)return l[0];let d=null!==(c=null!==(n=t.parentElement)&&void 0!==n?n:null===(e=t.shadowRoot)||void 0===e?void 0:e.host)&&void 0!==c?c:null===(u=t.parentNode)||void 0===u?void 0:u.host;if(!d)throw new a(`No provider in hierarchy found that matches "${String(i)}"!`);return o.find(d,i,h,r).attach(t,!0)}static create(t,i,h,r,n){return"string"==typeof i&&(i=(r?r+"__":"")+i),n&&s(`(${String(i)}) `,"Create Provider",t,i,h),new o(i,h,n).attach(t)}static getAttached(t){return t[n]instanceof Array||(t[n]=[]),t[n]}}const e=Symbol.for("stencil-quantum-error");class a extends Error{constructor(t,i){super(t instanceof Error?t.message:t),this.target=i,t instanceof Error&&Object.assign(this,t)}}function c(t,i){const s=new a(i,t);console.error(s);try{o.find(t,e).provide(s)}catch(t){throw s}}export{o as P,r as h,s as l,h as n,c as t}